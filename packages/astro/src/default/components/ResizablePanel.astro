---
import { classNames } from '@tutorialkit/components-react';

export type Type = 'horizontal' | 'vertical';
export type Priority = 'min' | 'max';

interface Props {
  id: string;
  type?: Type;
  pos?: string;
  min?: string;
  max?: string;
  class?: string;
  sidePanelClass?: string;
}

export interface IResizablePanel {
  mainPanel(): HTMLElement;
  sidePanel(): HTMLElement | undefined;
  divider(): HTMLElement | undefined;
}

let {
  id,
  type = 'horizontal',
  min = '0%',
  pos = '50%',
  max = '100%',
  class: className = '',
  sidePanelClass = '',
} = Astro.props;

// check if there is a `slot` defined with name `b`
const hasSidePanel = Astro.slots.has('b');

if (!hasSidePanel) {
  // if we don't have a side panel, we make the first panel full width
  pos = '100%';
  min = '100%';
  max = '100%';
}

const panelClass = classNames('overflow-hidden', { 'h-full': type === 'horizontal' });
---

<resizable-panel class={className} data-id={id} data-type={type} data-pos={pos} data-min={min} data-max={max}>
  <div
    data-id="container"
    class={classNames('sm:grid relative w-full h-full max-w-full', {
      'sm:grid-cols-[var(--pos)_1fr]': type === 'horizontal',
      'sm:grid-rows-[var(--pos)_1fr]': type !== 'horizontal',
    })}
    style=`--pos: ${pos}`
  >
    <!-- It's important to keep the inline script here because it restores the position and blocks rendering to avoid flickering -->
    <script is:inline define:vars={{ id, hasSidePanel }}>
      if (!hasSidePanel) {
        // if we don't have a side panel, we don't have to restore the handle
        return;
      }

      const sessionStorageKey = `tk_resizable_panel_${id}`;

      const $container = document.querySelector(`resizable-panel[data-id="${id}"] > div`);
      const pos = sessionStorage.getItem(sessionStorageKey);

      if (pos) {
        $container.style.setProperty('--pos', pos);
      }
    </script>
    <div class={panelClass} data-id="main-panel">
      <slot name="a" />
    </div>
    {
      hasSidePanel && (
        <>
          <div class={`${panelClass} ${sidePanelClass}`} data-id="side-panel">
            <slot name="b" />
          </div>
          <div
            data-id="divider"
            class={classNames('absolute z-90 transition-colors hover:bg-gray-500/13', {
              'w-0 h-full left-[var(--pos)] cursor-ew-resize p-0 px-1.5 -translate-x-1/2': type === 'horizontal',
              'h-0 w-full top-[var(--pos)] cursor-ns-resize p-0 py-2 -translate-y-1/2': type !== 'horizontal',
            })}
          />
        </>
      )
    }
  </div>
</resizable-panel>

<script>
  import type { Type, IResizablePanel } from './ResizablePanel.astro';

  class ResizablePanel extends HTMLElement implements IResizablePanel {
    readonly #id = this.dataset.id as string;
    readonly #type = this.dataset.type as Type;
    readonly #min = this.dataset.min as string;
    readonly #max = this.dataset.max as string;

    #pos = this.dataset.pos as string;
    #width = 0;
    #height = 0;
    #dragging = false;

    #container: HTMLElement;
    #mainPanel: HTMLElement;
    #sidePanel: HTMLElement | undefined;
    #divider: HTMLElement | undefined;

    constructor() {
      super();

      this.#container = this.querySelector(':scope > [data-id="container"]') as HTMLElement;
      this.#mainPanel = this.#container.querySelector(':scope > [data-id="main-panel"]') as HTMLElement;
      this.#sidePanel = this.#container.querySelector(':scope > [data-id="side-panel"]') as HTMLElement | undefined;
      this.#divider = this.#container.querySelector(':scope > [data-id="divider"]') as HTMLElement | undefined;

      this.#width = this.#container.clientWidth;
      this.#height = this.#container.clientHeight;

      const resizeObserver = new ResizeObserver((entries) => {
        const { clientWidth, clientHeight } = entries[0].target;

        this.#width = clientWidth;
        this.#height = clientHeight;
      });

      resizeObserver.observe(this.#container);

      // only if we have a divider, which means we have a side panel, we restore the position
      if (this.#divider) {
        this.#pos = sessionStorage.getItem(`tk_resizable_panel_${this.#id}`) ?? this.#pos;

        this.#setPosition(this.#pos);
      }
    }

    mainPanel(): HTMLElement {
      return this.#mainPanel;
    }

    sidePanel(): HTMLElement | undefined {
      return this.#sidePanel;
    }

    divider(): HTMLElement | undefined {
      return this.#divider;
    }

    connectedCallback() {
      this.#divider?.addEventListener('mousedown', this.#onMouseDown.bind(this));
      this.#divider?.addEventListener('touchstart', this.#onMouseDown.bind(this), { passive: true });
    }

    disconnectedCallback() {
      this.#divider?.removeEventListener('mousedown', this.#onMouseDown.bind(this));

      window.removeEventListener('mouseup', this.#onMouseUp);
      window.removeEventListener('mousemove', this.#onMouseMove);

      window.removeEventListener('touchend', this.#onMouseUp);
      window.removeEventListener('touchmove', this.#onTouchMove);
    }

    #onMouseMove(mouseMoveEvent: MouseEvent) {
      if (!this.#dragging) {
        return;
      }

      this.#updatePosition(mouseMoveEvent.clientX, mouseMoveEvent.clientY);
    }

    #onTouchMove(event: TouchEvent) {
      if (!this.#dragging) {
        return;
      }

      this.#updatePosition(event.touches[0].clientX, event.touches[0].clientY);
    }

    #onMouseUp() {
      this.#dragging = false;

      sessionStorage.setItem(`tk_resizable_panel_${this.#id}`, this.#pos);

      window.removeEventListener('mouseup', this.#onMouseUp);
      window.removeEventListener('mousemove', this.#onMouseMove);
    }

    #onMouseDown(event: MouseEvent | TouchEvent) {
      if ('button' in event && event.button !== 0) {
        return;
      }

      event.preventDefault();

      this.#dragging = true;

      window.addEventListener('mousemove', this.#onMouseMove.bind(this));
      window.addEventListener('mouseup', this.#onMouseUp.bind(this));

      window.addEventListener('touchmove', this.#onTouchMove.bind(this));
      window.addEventListener('touchend', this.#onMouseUp.bind(this));
    }

    #updatePosition(x: number, y: number) {
      const { top, left } = this.#container.getBoundingClientRect();

      const posPx = this.#type === 'horizontal' ? x - left : y - top;
      const size = this.#type === 'horizontal' ? this.#width : this.#height;

      const pos = `${(100 * posPx) / size}%`;

      this.#setPosition(pos);
    }

    #setPosition(pos: string) {
      const size = this.#type === 'horizontal' ? this.#width : this.#height;

      let minPx = parseFloat(this.#min);
      let maxPx = parseFloat(this.#max);
      let posPx = parseFloat(pos);

      minPx = (size * minPx) / 100;
      maxPx = (size * maxPx) / 100;
      posPx = (size * posPx) / 100;

      if (minPx < 0) {
        minPx += size;
      }

      if (maxPx < 0) {
        maxPx += size;
      }

      posPx = Math.max(minPx, Math.min(maxPx, posPx));

      this.#pos = `${(100 * posPx) / size}%`;

      this.#container.style.setProperty('--pos', this.#pos);
    }
  }

  customElements.define('resizable-panel', ResizablePanel);
</script>
